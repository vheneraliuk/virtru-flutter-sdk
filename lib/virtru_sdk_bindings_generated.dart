// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for Virtru SDK.
///
/// Regenerate bindings with `dart run ffigen`.
///
class VirtruSdkFlutterBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  VirtruSdkFlutterBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  VirtruSdkFlutterBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Allows for .NET P/Invoke to free native memory
  /// \param vMemoryPtr - The malloc'd memory to be freed.
  int VFreeMemory(
    ffi.Pointer<ffi.Void> vMemoryPtr,
  ) {
    return _VFreeMemory(
      vMemoryPtr,
    );
  }

  late final _VFreeMemoryPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
          'VFreeMemory');
  late final _VFreeMemory =
      _VFreeMemoryPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// DEPRECATED in favor of OIDC client credential flows
  /// Create a new Virtru client instance with owner and appId.
  /// \param owner - The owner's email address to be used to authenticate for encrypt, decrypt
  /// and policy management. Any data encrypted will be owned by the supplied email address.
  /// The owner will always have access to the encrypted data (TDF).
  /// \param appId - The virtru application ID can be obtained from the
  /// <a href="https://developer.virtru.com/docs/how-to-download-appid-token">Virtru Dashboard</a>
  /// \return VirtruClient opaque object.
  /// NOTE: On failure returns NULL ptr.
  VClientPtr VClientCreateWithAppId(
    ffi.Pointer<ffi.Char> owner,
    ffi.Pointer<ffi.Char> appId,
  ) {
    return _VClientCreateWithAppId(
      owner,
      appId,
    );
  }

  late final _VClientCreateWithAppIdPtr = _lookup<
      ffi.NativeFunction<
          VClientPtr Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('VClientCreateWithAppId');
  late final _VClientCreateWithAppId = _VClientCreateWithAppIdPtr.asFunction<
      VClientPtr Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// DEPRECATED in favor of OIDC client credential flows
  /// Create a new Virtru Client instance with owner and HMAC apiKey/apiSecret.
  /// <a href="https://developer.virtru.com/docs/how-to-add-authentication#section-3-hmac-token-and-secret">Contact Virtru</a> to get your
  /// organization's HMAC apiKey/apiSecret
  /// \param owner - The owner's email address to be used to authenticate  for encrypt, decrypt
  /// and policy management.
  /// \param apiKey - The HMAC api key
  /// \param apiSecret - The HMAC api secret
  /// \return VirtruClient opaque object.
  /// NOTE: On failure returns NULL ptr.
  VClientPtr VClientCreateWithHMAC(
    ffi.Pointer<ffi.Char> owner,
    ffi.Pointer<ffi.Char> apiKey,
    ffi.Pointer<ffi.Char> apiSecret,
  ) {
    return _VClientCreateWithHMAC(
      owner,
      apiKey,
      apiSecret,
    );
  }

  late final _VClientCreateWithHMACPtr = _lookup<
      ffi.NativeFunction<
          VClientPtr Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('VClientCreateWithHMAC');
  late final _VClientCreateWithHMAC = _VClientCreateWithHMACPtr.asFunction<
      VClientPtr Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  /// Create a new Virtru Client instance with owner and organization/realm-scoped OIDC client credentials.
  /// <a href="TBDLINK">Contact Virtru</a> to get client credentials for clients in your organization
  /// \param owner - The owner's email address to be used to authenticate  for encrypt, decrypt
  /// \param organizationName - The OIDC realm or organization the client belongs to
  /// \param clientId - The clientId part of the client credentialset issued to the client
  /// \clientSecret - The clientSecret part of the client credentialset issued to the client
  /// \return VirtruClient opaque object.
  /// NOTE: On failure returns NULL ptr.
  VClientPtr VClientCreateWithOIDC(
    ffi.Pointer<ffi.Char> owner,
    ffi.Pointer<ffi.Char> organizationName,
    ffi.Pointer<ffi.Char> clientId,
    ffi.Pointer<ffi.Char> clientSecret,
  ) {
    return _VClientCreateWithOIDC(
      owner,
      organizationName,
      clientId,
      clientSecret,
    );
  }

  late final _VClientCreateWithOIDCPtr = _lookup<
      ffi.NativeFunction<
          VClientPtr Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('VClientCreateWithOIDC');
  late final _VClientCreateWithOIDC = _VClientCreateWithOIDCPtr.asFunction<
      VClientPtr Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Destruct the Virtru client instance.
  /// \param vClientPtr - The pointer to Virtru client opaque object.
  void VClientDestroy(
    VClientPtr vClientPtr,
  ) {
    return _VClientDestroy(
      vClientPtr,
    );
  }

  late final _VClientDestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(VClientPtr)>>(
          'VClientDestroy');
  late final _VClientDestroy =
      _VClientDestroyPtr.asFunction<void Function(VClientPtr)>();

  /// Enable the internal logger class to write logs to the console for given LogLevel.
  /// The default logLevel is 'Warn'
  int VEnableConsoleLogging(
    VClientPtr vClientPtr,
    int logLevel,
  ) {
    return _VEnableConsoleLogging(
      vClientPtr,
      logLevel,
    );
  }

  late final _VEnableConsoleLoggingPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(VClientPtr, ffi.Int32)>>(
          'VEnableConsoleLogging');
  late final _VEnableConsoleLogging =
      _VEnableConsoleLoggingPtr.asFunction<int Function(VClientPtr, int)>();

  /// Set the TDF protocol (format) to be used for encryption and decryption operations. HTML is the
  /// default format.  The protocols refer to the data format after encryption.
  /// Options are .tdf (which is a zip) or HTML.
  /// \param vClientPtr - The pointer to Virtru client opaque object.
  /// \param vProtocol - type of the protocol (format)
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VSetProtocol(
    VClientPtr vClientPtr,
    int vProtocol,
  ) {
    return _VSetProtocol(
      vClientPtr,
      vProtocol,
    );
  }

  late final _VSetProtocolPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(VClientPtr, ffi.Int32)>>(
          'VSetProtocol');
  late final _VSetProtocol =
      _VSetProtocolPtr.asFunction<int Function(VClientPtr, int)>();

  /// Set the offline mode.
  /// \param vClientPtr - The pointer to Virtru client opaque object.
  /// \param state - If true, all the TDFs will be encrypted in offline mode that means the symmetric key
  /// stored part of the TDF instead on the server.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VSetOffline(
    VClientPtr vClientPtr,
    int state,
  ) {
    return _VSetOffline(
      vClientPtr,
      state,
    );
  }

  late final _VSetOfflinePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(VClientPtr, ffi.Int)>>(
          'VSetOffline');
  late final _VSetOffline =
      _VSetOfflinePtr.asFunction<int Function(VClientPtr, int)>();

  /// Encrypt the contents of the input file into a TDF. In the process of encryption, a policy is
  /// associated with the TDF. The policy has a unique id which can be used to identify the TDF policy.
  /// \param vClientPtr - The pointer to Virtru client opaque object.
  /// \param vEncryptFileParamsPtr  - Encrypt file param opaque object holding all the required information for encrypt operations
  /// \param outPolicyId  - On success, it contains policy id.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  /// NOTE: The caller of the api should free outPolicyId buffer.
  int VClientEncryptFile(
    VClientPtr vClientPtr,
    VEncryptFileParamsPtr vEncryptFileParamsPtr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> outPolicyId,
  ) {
    return _VClientEncryptFile(
      vClientPtr,
      vEncryptFileParamsPtr,
      outPolicyId,
    );
  }

  late final _VClientEncryptFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(VClientPtr, VEncryptFileParamsPtr,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('VClientEncryptFile');
  late final _VClientEncryptFile = _VClientEncryptFilePtr.asFunction<
      int Function(VClientPtr, VEncryptFileParamsPtr,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Encrypt the contents of the input file into a RCA TDF. In the process of encryption, a policy is
  /// associated with the TDF. The policy has a unique id which can be used to identify the TDF policy.
  /// \param vClientPtr - The pointer to Virtru client opaque object.
  /// \param vEncryptFileParamsPtr  - Encrypt file param opaque object holding all the required information for encrypt operations
  /// \param outPolicyId  - On success, it contains policy id.
  /// \param outRcaLink  - On success, it contains RCA tdf link.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  /// NOTE: The caller of the api should free outPolicyId buffer and outRcaLink.
  int VClientEncryptFileToRCA(
    VClientPtr vClientPtr,
    VEncryptFileParamsPtr vEncryptFileParamsPtr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> outPolicyId,
    ffi.Pointer<ffi.Pointer<ffi.Char>> outRcaLink,
  ) {
    return _VClientEncryptFileToRCA(
      vClientPtr,
      vEncryptFileParamsPtr,
      outPolicyId,
      outRcaLink,
    );
  }

  late final _VClientEncryptFileToRCAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              VClientPtr,
              VEncryptFileParamsPtr,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('VClientEncryptFileToRCA');
  late final _VClientEncryptFileToRCA = _VClientEncryptFileToRCAPtr.asFunction<
      int Function(
          VClientPtr,
          VEncryptFileParamsPtr,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Decrypt the contents of the TDF file into its original content.
  /// \param vClientPtr - The pointer to Virtru client opaque object.
  /// \param inFilepath - The TDF file on which the decryption is performed
  /// \param outFilepath - The file path of the original content after successful decryption
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VClientDecryptFile(
    VClientPtr vClientPtr,
    ffi.Pointer<ffi.Char> inFilepath,
    ffi.Pointer<ffi.Char> outFilepath,
  ) {
    return _VClientDecryptFile(
      vClientPtr,
      inFilepath,
      outFilepath,
    );
  }

  late final _VClientDecryptFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(VClientPtr, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('VClientDecryptFile');
  late final _VClientDecryptFile = _VClientDecryptFilePtr.asFunction<
      int Function(VClientPtr, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Decrypt the remote contents(RCA) file into its original content.
  /// \param vClientPtr - The pointer to Virtru client opaque object.
  /// \param rcaLink - The link contains the information of remote content
  /// \param outFilepath - The file path of the original content after successful decryption
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VClientDecryptRCAToFile(
    VClientPtr vClientPtr,
    ffi.Pointer<ffi.Char> rcaLink,
    ffi.Pointer<ffi.Char> outFilepath,
  ) {
    return _VClientDecryptRCAToFile(
      vClientPtr,
      rcaLink,
      outFilepath,
    );
  }

  late final _VClientDecryptRCAToFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(VClientPtr, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('VClientDecryptRCAToFile');
  late final _VClientDecryptRCAToFile = _VClientDecryptRCAToFilePtr.asFunction<
      int Function(VClientPtr, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Decrypt the remote content TDF(RCA)
  /// \param vClientPtr - The pointer to Virtru client opaque object.
  /// \param rcaLink - The link contains the information of remote content
  /// \param outString - On success, it contains RCA tdf link.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VClientDecryptRCAToString(
    VClientPtr vClientPtr,
    ffi.Pointer<ffi.Char> rcaLink,
    ffi.Pointer<ffi.Pointer<ffi.Char>> outString,
  ) {
    return _VClientDecryptRCAToString(
      vClientPtr,
      rcaLink,
      outString,
    );
  }

  late final _VClientDecryptRCAToStringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(VClientPtr, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'VClientDecryptRCAToString');
  late final _VClientDecryptRCAToString =
      _VClientDecryptRCAToStringPtr.asFunction<
          int Function(VClientPtr, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Encrypt the plain data into a TDF. In the process of encryption, a policy is
  /// associated with the TDF. The policy has a unique id which can be used to identify the TDF policy.
  /// \param vClientPtr - The pointer to Virtru client opaque object.
  /// \param vEncryptStringParamsPtr  - Encrypt string param opaque object holding all the required information for encrypt operations
  /// \param outPolicyId  - On success, it contains policy id.
  /// \param outBytesPtr  - On success, it contains the encrypted tdf data.
  /// \param outBytesLength  - On success, it is length of the encrypted tdf data.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  /// NOTE: The caller of the api should free outPolicyId buffer and outBytesPtr.
  int VClientEncryptString(
    VClientPtr vClientPtr,
    VEncryptStringParamsPtr vEncryptStringParamsPtr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> outPolicyId,
    ffi.Pointer<VBytesPtr> outBytesPtr,
    ffi.Pointer<VBytesLength> outBytesLength,
  ) {
    return _VClientEncryptString(
      vClientPtr,
      vEncryptStringParamsPtr,
      outPolicyId,
      outBytesPtr,
      outBytesLength,
    );
  }

  late final _VClientEncryptStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              VClientPtr,
              VEncryptStringParamsPtr,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<VBytesPtr>,
              ffi.Pointer<VBytesLength>)>>('VClientEncryptString');
  late final _VClientEncryptString = _VClientEncryptStringPtr.asFunction<
      int Function(
          VClientPtr,
          VEncryptStringParamsPtr,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<VBytesPtr>,
          ffi.Pointer<VBytesLength>)>();

  /// Encrypt the plain data into a remote TDF. In the process of encryption, a policy is
  /// associated with the TDF. The policy has a unique id which can be used to identify the TDF policy.
  /// \param vClientPtr - The pointer to Virtru client opaque object.
  /// \param vEncryptStringParamsPtr  - Encrypt string param opaque object holding all the required information for encrypt operations
  /// \param outPolicyId  - On success, it contains policy id.
  /// \param outRcaLink  - On success, it contains RCA tdf link.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  /// NOTE: The caller of the api should free outPolicyId buffer and outRcaLink.
  int VClientEncryptStringToRCA(
    VClientPtr vClientPtr,
    VEncryptStringParamsPtr vEncryptStringParamsPtr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> outPolicyId,
    ffi.Pointer<ffi.Pointer<ffi.Char>> outRcaLink,
  ) {
    return _VClientEncryptStringToRCA(
      vClientPtr,
      vEncryptStringParamsPtr,
      outPolicyId,
      outRcaLink,
    );
  }

  late final _VClientEncryptStringToRCAPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  VClientPtr,
                  VEncryptStringParamsPtr,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'VClientEncryptStringToRCA');
  late final _VClientEncryptStringToRCA =
      _VClientEncryptStringToRCAPtr.asFunction<
          int Function(
              VClientPtr,
              VEncryptStringParamsPtr,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Decrypt the TDF data
  /// \param vClientPtr - The pointer to Virtru client opaque object.
  /// \param inBytesPtr  - Pointer to buffer containing the TDF data.
  /// \param inBytesLength  - Length of buffer containing the TDF data.
  /// \param outBytesPtr  - On success, it contains the decrypted tdf data.
  /// \param outBytesLength  - On success, it is length of the decrypted tdf data.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  /// NOTE: The caller of the api should free outBytesPtr.
  int VClientDecryptString(
    VClientPtr vClientPtr,
    VCBytesPtr inBytesPtr,
    int inBytesLength,
    ffi.Pointer<VBytesPtr> outBytesPtr,
    ffi.Pointer<VBytesLength> outBytesLength,
  ) {
    return _VClientDecryptString(
      vClientPtr,
      inBytesPtr,
      inBytesLength,
      outBytesPtr,
      outBytesLength,
    );
  }

  late final _VClientDecryptStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              VClientPtr,
              VCBytesPtr,
              VBytesLength,
              ffi.Pointer<VBytesPtr>,
              ffi.Pointer<VBytesLength>)>>('VClientDecryptString');
  late final _VClientDecryptString = _VClientDecryptStringPtr.asFunction<
      int Function(VClientPtr, VCBytesPtr, int, ffi.Pointer<VBytesPtr>,
          ffi.Pointer<VBytesLength>)>();

  /// Return the policy associated with the given policy uuid.
  /// \param vClientPtr - The pointer to Virtru client opaque object.
  /// \param policyUUID - The unique policy uuid.
  /// \param vPolicyPtr - On success, it hold the ptr to the policy object.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  /// NOTE: The caller of the api should free vPolicyPtr.
  int VClientFetchPolicyForUUID(
    VClientPtr vClientPtr,
    ffi.Pointer<ffi.Char> policyUUID,
    ffi.Pointer<VPolicyPtr> vPolicyPtr,
  ) {
    return _VClientFetchPolicyForUUID(
      vClientPtr,
      policyUUID,
      vPolicyPtr,
    );
  }

  late final _VClientFetchPolicyForUUIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(VClientPtr, ffi.Pointer<ffi.Char>,
              ffi.Pointer<VPolicyPtr>)>>('VClientFetchPolicyForUUID');
  late final _VClientFetchPolicyForUUID =
      _VClientFetchPolicyForUUIDPtr.asFunction<
          int Function(
              VClientPtr, ffi.Pointer<ffi.Char>, ffi.Pointer<VPolicyPtr>)>();

  /// Set the KAS url that will be used for tdf3 operations.
  /// \param vClientPtr - The pointer to Virtru client opaque object.
  /// \param kasUrl - The base URL for KAS communication.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VClientSetKasUrl(
    VClientPtr vClientPtr,
    ffi.Pointer<ffi.Char> kasUrl,
  ) {
    return _VClientSetKasUrl(
      vClientPtr,
      kasUrl,
    );
  }

  late final _VClientSetKasUrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              VClientPtr, ffi.Pointer<ffi.Char>)>>('VClientSetKasUrl');
  late final _VClientSetKasUrl = _VClientSetKasUrlPtr.asFunction<
      int Function(VClientPtr, ffi.Pointer<ffi.Char>)>();

  /// Set the OIDC IdP url that will be used to authenticate against.
  /// \param vClientPtr - The pointer to Virtru client opaque object.
  /// \param oidcUrl - The base URL for the OIDC IdP (e.g. Keycloak) for the client to authenticate against.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VClientSetOIDCProviderUrl(
    VClientPtr vClientPtr,
    ffi.Pointer<ffi.Char> oidcUrl,
  ) {
    return _VClientSetOIDCProviderUrl(
      vClientPtr,
      oidcUrl,
    );
  }

  late final _VClientSetOIDCProviderUrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              VClientPtr, ffi.Pointer<ffi.Char>)>>('VClientSetOIDCProviderUrl');
  late final _VClientSetOIDCProviderUrl = _VClientSetOIDCProviderUrlPtr
      .asFunction<int Function(VClientPtr, ffi.Pointer<ffi.Char>)>();

  /// DEPRECATED OIDC auth flows do not use EAS.
  /// Set the EAS url that will be used for tdf3 operations.
  /// \param vClientPtr - The pointer to Virtru client opaque object.
  /// \param easUrl - The base URL for EAS communication.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VClientSetEasUrl(
    VClientPtr vClientPtr,
    ffi.Pointer<ffi.Char> easUrl,
  ) {
    return _VClientSetEasUrl(
      vClientPtr,
      easUrl,
    );
  }

  late final _VClientSetEasUrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              VClientPtr, ffi.Pointer<ffi.Char>)>>('VClientSetEasUrl');
  late final _VClientSetEasUrl = _VClientSetEasUrlPtr.asFunction<
      int Function(VClientPtr, ffi.Pointer<ffi.Char>)>();

  /// Set the ACM url that will be used for TDF policy sync operations.
  /// \param vClientPtr - The pointer to Virtru client opaque object.
  /// \param acmUrl - The base URL for ACM communication.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VClientSetAcmUrl(
    VClientPtr vClientPtr,
    ffi.Pointer<ffi.Char> acmUrl,
  ) {
    return _VClientSetAcmUrl(
      vClientPtr,
      acmUrl,
    );
  }

  late final _VClientSetAcmUrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              VClientPtr, ffi.Pointer<ffi.Char>)>>('VClientSetAcmUrl');
  late final _VClientSetAcmUrl = _VClientSetAcmUrlPtr.asFunction<
      int Function(VClientPtr, ffi.Pointer<ffi.Char>)>();

  /// Set the secure reader url which will be used in html tdf.
  /// \param vClientPtr - The pointer to Virtru client opaque object.
  /// \param srUrl - The URL for Secure reader.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VClientSetSecureReaderUrl(
    VClientPtr vClientPtr,
    ffi.Pointer<ffi.Char> srUrl,
  ) {
    return _VClientSetSecureReaderUrl(
      vClientPtr,
      srUrl,
    );
  }

  late final _VClientSetSecureReaderUrlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              VClientPtr, ffi.Pointer<ffi.Char>)>>('VClientSetSecureReaderUrl');
  late final _VClientSetSecureReaderUrl = _VClientSetSecureReaderUrlPtr
      .asFunction<int Function(VClientPtr, ffi.Pointer<ffi.Char>)>();

  /// Create a new encrypt file param opaque object.
  /// NOTE: The out file path will have .html/.tdf extension appended to
  /// inFilePath based on protocol.
  /// \param inFilePath - The file on which the encryption is performed
  /// \return VEncryptFileParams opaque object.
  /// NOTE: On failure returns NULL ptr.
  VEncryptFileParamsPtr VEncryptFileParamsCreate1(
    ffi.Pointer<ffi.Char> inFilePath,
  ) {
    return _VEncryptFileParamsCreate1(
      inFilePath,
    );
  }

  late final _VEncryptFileParamsCreate1Ptr = _lookup<
      ffi.NativeFunction<
          VEncryptFileParamsPtr Function(
              ffi.Pointer<ffi.Char>)>>('VEncryptFileParamsCreate1');
  late final _VEncryptFileParamsCreate1 = _VEncryptFileParamsCreate1Ptr
      .asFunction<VEncryptFileParamsPtr Function(ffi.Pointer<ffi.Char>)>();

  /// Create a new encrypt file param opaque object.
  /// \param inFilePath - The file on which the encryption is performed
  /// \param outFilePath - The file path of the tdf after successful encryption
  /// \return VEncryptFileParams opaque object.
  /// NOTE: On failure returns NULL ptr.
  VEncryptFileParamsPtr VEncryptFileParamsCreate2(
    ffi.Pointer<ffi.Char> inFilePath,
    ffi.Pointer<ffi.Char> outFilePath,
  ) {
    return _VEncryptFileParamsCreate2(
      inFilePath,
      outFilePath,
    );
  }

  late final _VEncryptFileParamsCreate2Ptr = _lookup<
      ffi.NativeFunction<
          VEncryptFileParamsPtr Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('VEncryptFileParamsCreate2');
  late final _VEncryptFileParamsCreate2 =
      _VEncryptFileParamsCreate2Ptr.asFunction<
          VEncryptFileParamsPtr Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Destruct the EncryptFileParams instance.
  /// \param vEncryptFileParamsPtr - The pointer to EncryptFileParams opaque object.
  void VEncryptFileParamsDestroy(
    VEncryptFileParamsPtr vEncryptFileParamsPtr,
  ) {
    return _VEncryptFileParamsDestroy(
      vEncryptFileParamsPtr,
    );
  }

  late final _VEncryptFileParamsDestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(VEncryptFileParamsPtr)>>(
          'VEncryptFileParamsDestroy');
  late final _VEncryptFileParamsDestroy = _VEncryptFileParamsDestroyPtr
      .asFunction<void Function(VEncryptFileParamsPtr)>();

  /// Set the mime type (format) of the file that will be encrypted
  /// NOTE: The default will be 'application/octet-stream' if not specified
  /// \param vEncryptFileParamsPtr - The pointer to EncryptFileParams opaque object.
  /// \param mimeType - The mime type of the file, null terminated string.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VEncryptFileParamsSetMimeType(
    VEncryptFileParamsPtr vEncryptFileParamsPtr,
    ffi.Pointer<ffi.Char> mimeType,
  ) {
    return _VEncryptFileParamsSetMimeType(
      vEncryptFileParamsPtr,
      mimeType,
    );
  }

  late final _VEncryptFileParamsSetMimeTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(VEncryptFileParamsPtr,
              ffi.Pointer<ffi.Char>)>>('VEncryptFileParamsSetMimeType');
  late final _VEncryptFileParamsSetMimeType = _VEncryptFileParamsSetMimeTypePtr
      .asFunction<int Function(VEncryptFileParamsPtr, ffi.Pointer<ffi.Char>)>();

  /// Set the policy that to be applied to the tdf
  /// NOTE: If there is no policy defined for the tdf, default policy settings
  /// will be applied
  /// \param vEncryptFileParamsPtr - The pointer to EncryptFileParams opaque object.
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VEncryptFileParamsSetPolicy(
    VEncryptFileParamsPtr vEncryptFileParamsPtr,
    VPolicyPtr vPolicyPtr,
  ) {
    return _VEncryptFileParamsSetPolicy(
      vEncryptFileParamsPtr,
      vPolicyPtr,
    );
  }

  late final _VEncryptFileParamsSetPolicyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(VEncryptFileParamsPtr,
              VPolicyPtr)>>('VEncryptFileParamsSetPolicy');
  late final _VEncryptFileParamsSetPolicy = _VEncryptFileParamsSetPolicyPtr
      .asFunction<int Function(VEncryptFileParamsPtr, VPolicyPtr)>();

  /// Set the display name for the tdf, this name shows up on the Virtru dashboard
  /// NOTE: If not set, the basename of inFilePath will be used
  /// \param vEncryptFileParamsPtr - The pointer to EncryptFileParams opaque object.
  /// \param displayName - The display name for the tdf, null terminated string.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VEncryptFileParamsSetDisplayName(
    VEncryptFileParamsPtr vEncryptFileParamsPtr,
    ffi.Pointer<ffi.Char> displayName,
  ) {
    return _VEncryptFileParamsSetDisplayName(
      vEncryptFileParamsPtr,
      displayName,
    );
  }

  late final _VEncryptFileParamsSetDisplayNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(VEncryptFileParamsPtr,
              ffi.Pointer<ffi.Char>)>>('VEncryptFileParamsSetDisplayName');
  late final _VEncryptFileParamsSetDisplayName =
      _VEncryptFileParamsSetDisplayNamePtr.asFunction<
          int Function(VEncryptFileParamsPtr, ffi.Pointer<ffi.Char>)>();

  /// Set the display message for the tdf, this message shows up on the Virtru dashboard
  /// \param vEncryptFileParamsPtr - The pointer to EncryptFileParams opaque object.
  /// \param displayMessage - The display message for the tdf, null terminated string.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VEncryptFileParamsSetDisplayMessage(
    VEncryptFileParamsPtr vEncryptFileParamsPtr,
    ffi.Pointer<ffi.Char> displayMessage,
  ) {
    return _VEncryptFileParamsSetDisplayMessage(
      vEncryptFileParamsPtr,
      displayMessage,
    );
  }

  late final _VEncryptFileParamsSetDisplayMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(VEncryptFileParamsPtr,
              ffi.Pointer<ffi.Char>)>>('VEncryptFileParamsSetDisplayMessage');
  late final _VEncryptFileParamsSetDisplayMessage =
      _VEncryptFileParamsSetDisplayMessagePtr.asFunction<
          int Function(VEncryptFileParamsPtr, ffi.Pointer<ffi.Char>)>();

  /// Add access to the TDF file/data for the users in the list
  /// \param vEncryptFileParamsPtr - The pointer to EncryptFileParams opaque object.
  /// \param users - Share the TDF with the users in the users array
  /// \param usersCount - Total user count in the array.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VEncryptFileParamsShareWithUsers(
    VEncryptFileParamsPtr vEncryptFileParamsPtr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> users,
    int usersCount,
  ) {
    return _VEncryptFileParamsShareWithUsers(
      vEncryptFileParamsPtr,
      users,
      usersCount,
    );
  }

  late final _VEncryptFileParamsShareWithUsersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              VEncryptFileParamsPtr,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.UnsignedInt)>>('VEncryptFileParamsShareWithUsers');
  late final _VEncryptFileParamsShareWithUsers =
      _VEncryptFileParamsShareWithUsersPtr.asFunction<
          int Function(VEncryptFileParamsPtr,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  ffi.Pointer<ConfigService> VConfigServiceCreate(
    ffi.Pointer<ffi.Char> configUrl,
  ) {
    return _VConfigServiceCreate(
      configUrl,
    );
  }

  late final _VConfigServiceCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ConfigService> Function(
              ffi.Pointer<ffi.Char>)>>('VConfigServiceCreate');
  late final _VConfigServiceCreate = _VConfigServiceCreatePtr.asFunction<
      ffi.Pointer<ConfigService> Function(ffi.Pointer<ffi.Char>)>();

  /// Destructor
  void VConfigServiceDestroy(
    ffi.Pointer<ConfigService> configService,
  ) {
    return _VConfigServiceDestroy(
      configService,
    );
  }

  late final _VConfigServiceDestroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ConfigService>)>>(
      'VConfigServiceDestroy');
  late final _VConfigServiceDestroy = _VConfigServiceDestroyPtr.asFunction<
      void Function(ffi.Pointer<ConfigService>)>();

  /// Get the config from Config Service
  /// \param configKey - compound key of the configuration to get
  /// \param outputFilePath - path to the file to save the output
  int VGetConfig(
    ffi.Pointer<ConfigService> configService,
    ffi.Pointer<ffi.Char> configKey,
    ffi.Pointer<ffi.Char> outputFilePath,
  ) {
    return _VGetConfig(
      configService,
      configKey,
      outputFilePath,
    );
  }

  late final _VGetConfigPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ConfigService>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('VGetConfig');
  late final _VGetConfig = _VGetConfigPtr.asFunction<
      int Function(ffi.Pointer<ConfigService>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  /// Create the Config Service entry
  /// \param configKey - compound key of the configuration to post
  /// \param inputFilePath - path to the file to read the config from
  int VCreateConfig(
    ffi.Pointer<ConfigService> configService,
    ffi.Pointer<ffi.Char> configKey,
    ffi.Pointer<ffi.Char> inputFilePath,
  ) {
    return _VCreateConfig(
      configService,
      configKey,
      inputFilePath,
    );
  }

  late final _VCreateConfigPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ConfigService>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('VCreateConfig');
  late final _VCreateConfig = _VCreateConfigPtr.asFunction<
      int Function(ffi.Pointer<ConfigService>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  /// Returns Configuration Metadata for a given key.
  /// \param configKey - compound key of the configuration to post
  /// \param inputFilePath - path to the file to read the config
  /// \return - Last-Modified Header value
  ffi.Pointer<ffi.Char> VGetConfigMetaData(
    ffi.Pointer<ConfigService> configService,
    ffi.Pointer<ffi.Char> configKey,
  ) {
    return _VGetConfigMetaData(
      configService,
      configKey,
    );
  }

  late final _VGetConfigMetaDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ConfigService>,
              ffi.Pointer<ffi.Char>)>>('VGetConfigMetaData');
  late final _VGetConfigMetaData = _VGetConfigMetaDataPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ConfigService>, ffi.Pointer<ffi.Char>)>();

  /// Add additional header
  /// \param key - name of the Header, e.g. Connection
  /// \param value - value of the Header, e.g. keep-alive
  void VAddHeader(
    ffi.Pointer<ConfigService> configService,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _VAddHeader(
      configService,
      key,
      value,
    );
  }

  late final _VAddHeaderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ConfigService>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('VAddHeader');
  late final _VAddHeader = _VAddHeaderPtr.asFunction<
      void Function(ffi.Pointer<ConfigService>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  /// Create a new encrypt string param opaque object.
  /// \param vBytesPtr - Const pointer to the data buffer.
  /// \param vBytesLength - The file on which the encryption is performed
  /// \return VEncryptStringParams opaque object.
  /// NOTE: On failure returns NULL ptr.
  VEncryptStringParamsPtr VEncryptStringParamsCreate(
    VCBytesPtr vBytesPtr,
    int vBytesLength,
  ) {
    return _VEncryptStringParamsCreate(
      vBytesPtr,
      vBytesLength,
    );
  }

  late final _VEncryptStringParamsCreatePtr = _lookup<
      ffi.NativeFunction<
          VEncryptStringParamsPtr Function(
              VCBytesPtr, VBytesLength)>>('VEncryptStringParamsCreate');
  late final _VEncryptStringParamsCreate = _VEncryptStringParamsCreatePtr
      .asFunction<VEncryptStringParamsPtr Function(VCBytesPtr, int)>();

  /// Destruct the EncryptStringParams instance.
  /// \param vEncryptStringParamsPtr - The pointer to EncryptStringParams opaque object.
  void VEncryptStringParamsDestroy(
    VEncryptStringParamsPtr vEncryptStringParamsPtr,
  ) {
    return _VEncryptStringParamsDestroy(
      vEncryptStringParamsPtr,
    );
  }

  late final _VEncryptStringParamsDestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(VEncryptStringParamsPtr)>>(
          'VEncryptStringParamsDestroy');
  late final _VEncryptStringParamsDestroy = _VEncryptStringParamsDestroyPtr
      .asFunction<void Function(VEncryptStringParamsPtr)>();

  /// Set the mime type (format) of the file that will be encrypted
  /// NOTE: The default will be 'application/octet-stream' if not specified
  /// \param vEncryptStringParamsPtr - The pointer to EncryptStringParams opaque object.
  /// \param mimeType - The mime type of the file, null terminated string.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VEncryptStringParamsSetMimeType(
    VEncryptStringParamsPtr vEncryptStringParamsPtr,
    ffi.Pointer<ffi.Char> mimeType,
  ) {
    return _VEncryptStringParamsSetMimeType(
      vEncryptStringParamsPtr,
      mimeType,
    );
  }

  late final _VEncryptStringParamsSetMimeTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(VEncryptStringParamsPtr,
              ffi.Pointer<ffi.Char>)>>('VEncryptStringParamsSetMimeType');
  late final _VEncryptStringParamsSetMimeType =
      _VEncryptStringParamsSetMimeTypePtr.asFunction<
          int Function(VEncryptStringParamsPtr, ffi.Pointer<ffi.Char>)>();

  /// Set the policy that to be applied to the tdf
  /// NOTE: If there is no policy defined for the tdf, default policy settings
  /// will be applied
  /// \param vEncryptStringParamsPtr - The pointer to EncryptStringParams opaque object.
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VEncryptStringParamsSetPolicy(
    VEncryptStringParamsPtr vEncryptStringParamsPtr,
    VPolicyPtr vPolicyPtr,
  ) {
    return _VEncryptStringParamsSetPolicy(
      vEncryptStringParamsPtr,
      vPolicyPtr,
    );
  }

  late final _VEncryptStringParamsSetPolicyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(VEncryptStringParamsPtr,
              VPolicyPtr)>>('VEncryptStringParamsSetPolicy');
  late final _VEncryptStringParamsSetPolicy = _VEncryptStringParamsSetPolicyPtr
      .asFunction<int Function(VEncryptStringParamsPtr, VPolicyPtr)>();

  /// Set the display name for the tdf, this name shows up on the Virtru dashboard
  /// NOTE: If not set, the basename of inFilePath will be used
  /// \param vEncryptStringParamsPtr - The pointer to EncryptStringParams opaque object.
  /// \param displayName - The display name for the tdf, null terminated string.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VEncryptStringParamsSetDisplayName(
    VEncryptStringParamsPtr vEncryptStringParamsPtr,
    ffi.Pointer<ffi.Char> displayName,
  ) {
    return _VEncryptStringParamsSetDisplayName(
      vEncryptStringParamsPtr,
      displayName,
    );
  }

  late final _VEncryptStringParamsSetDisplayNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(VEncryptStringParamsPtr,
              ffi.Pointer<ffi.Char>)>>('VEncryptStringParamsSetDisplayName');
  late final _VEncryptStringParamsSetDisplayName =
      _VEncryptStringParamsSetDisplayNamePtr.asFunction<
          int Function(VEncryptStringParamsPtr, ffi.Pointer<ffi.Char>)>();

  /// Set the display message for the tdf, this message shows up on the Virtru dashboard
  /// \param vEncryptStringParamsPtr - The pointer to EncryptStringParams opaque object.
  /// \param displayMessage - The display message for the tdf, null terminated string.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VEncryptStringParamsSetDisplayMessage(
    VEncryptStringParamsPtr vEncryptStringParamsPtr,
    ffi.Pointer<ffi.Char> displayMessage,
  ) {
    return _VEncryptStringParamsSetDisplayMessage(
      vEncryptStringParamsPtr,
      displayMessage,
    );
  }

  late final _VEncryptStringParamsSetDisplayMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(VEncryptStringParamsPtr,
              ffi.Pointer<ffi.Char>)>>('VEncryptStringParamsSetDisplayMessage');
  late final _VEncryptStringParamsSetDisplayMessage =
      _VEncryptStringParamsSetDisplayMessagePtr.asFunction<
          int Function(VEncryptStringParamsPtr, ffi.Pointer<ffi.Char>)>();

  /// Add access to the TDF file/data for the users in the list
  /// \param vEncryptStringParamsPtr - The pointer to EncryptStringParams opaque object.
  /// \param users - Share the TDF with the users in the users array
  /// \param usersCount - Total user count in the array.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VEncryptStringParamsShareWithUsers(
    VEncryptStringParamsPtr vEncryptStringParamsPtr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> users,
    int usersCount,
  ) {
    return _VEncryptStringParamsShareWithUsers(
      vEncryptStringParamsPtr,
      users,
      usersCount,
    );
  }

  late final _VEncryptStringParamsShareWithUsersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              VEncryptStringParamsPtr,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.UnsignedInt)>>('VEncryptStringParamsShareWithUsers');
  late final _VEncryptStringParamsShareWithUsers =
      _VEncryptStringParamsShareWithUsersPtr.asFunction<
          int Function(VEncryptStringParamsPtr,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  /// Create a new policy opaque object.
  /// \return VPolicyPtr opaque object.
  /// NOTE: On failure returns NULL ptr.
  VPolicyPtr VPolicyCreate() {
    return _VPolicyCreate();
  }

  late final _VPolicyCreatePtr =
      _lookup<ffi.NativeFunction<VPolicyPtr Function()>>('VPolicyCreate');
  late final _VPolicyCreate =
      _VPolicyCreatePtr.asFunction<VPolicyPtr Function()>();

  /// Destruct the policy instance.
  /// \param vPolicyPtr - The pointer to policy opaque object.
  void VPolicyDestroy(
    VPolicyPtr vPolicyPtr,
  ) {
    return _VPolicyDestroy(
      vPolicyPtr,
    );
  }

  late final _VPolicyDestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(VPolicyPtr)>>(
          'VPolicyDestroy');
  late final _VPolicyDestroy =
      _VPolicyDestroyPtr.asFunction<void Function(VPolicyPtr)>();

  /// Set the owner of the policy
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \param owner - The owner's email address, null terminated string.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  /// NOTE: By default, the owner is the address that was used when the client instance was created.
  /// This method will change the owner to the specified email address for the instance.
  int VSetOwner(
    VPolicyPtr vPolicyPtr,
    ffi.Pointer<ffi.Char> owner,
  ) {
    return _VSetOwner(
      vPolicyPtr,
      owner,
    );
  }

  late final _VSetOwnerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(VPolicyPtr, ffi.Pointer<ffi.Char>)>>('VSetOwner');
  late final _VSetOwner = _VSetOwnerPtr.asFunction<
      int Function(VPolicyPtr, ffi.Pointer<ffi.Char>)>();

  /// Get the owner of the policy
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \param owner - The owner's email address, null terminated string.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  /// NOTE: The caller is responsible for freeing the owner.
  int VGetOwner(
    VPolicyPtr vPolicyPtr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> owner,
  ) {
    return _VGetOwner(
      vPolicyPtr,
      owner,
    );
  }

  late final _VGetOwnerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              VPolicyPtr, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('VGetOwner');
  late final _VGetOwner = _VGetOwnerPtr.asFunction<
      int Function(VPolicyPtr, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Add access to the TDF file/data for the users in the array
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \param users - Share the TDF with the users in the users array
  /// \param usersCount - Total user count in the array.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VShareWithUsers(
    VPolicyPtr vPolicyPtr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> users,
    int usersCount,
  ) {
    return _VShareWithUsers(
      vPolicyPtr,
      users,
      usersCount,
    );
  }

  late final _VShareWithUsersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(VPolicyPtr, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.UnsignedInt)>>('VShareWithUsers');
  late final _VShareWithUsers = _VShareWithUsersPtr.asFunction<
      int Function(VPolicyPtr, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  /// Remove access to the TDF file/data for the users in the array
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \param users - Share the TDF with the users in the users array
  /// \param usersCount - Total user count in the array.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VRemoveUsers(
    VPolicyPtr vPolicyPtr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> users,
    int usersCount,
  ) {
    return _VRemoveUsers(
      vPolicyPtr,
      users,
      usersCount,
    );
  }

  late final _VRemoveUsersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(VPolicyPtr, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.UnsignedInt)>>('VRemoveUsers');
  late final _VRemoveUsers = _VRemoveUsersPtr.asFunction<
      int Function(VPolicyPtr, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  /// Return all the user who have access to the TDF.
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \param users - Holds the users who have access to the TDF.
  /// \param usersCount - Total shared user count.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  /// NOTE: The caller is responsible for freeing users array.
  int VGetSharedUsers(
    VPolicyPtr vPolicyPtr,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> users,
    ffi.Pointer<ffi.UnsignedInt> usersCount,
  ) {
    return _VGetSharedUsers(
      vPolicyPtr,
      users,
      usersCount,
    );
  }

  late final _VGetSharedUsersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              VPolicyPtr,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
              ffi.Pointer<ffi.UnsignedInt>)>>('VGetSharedUsers');
  late final _VGetSharedUsers = _VGetSharedUsersPtr.asFunction<
      int Function(VPolicyPtr, ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
          ffi.Pointer<ffi.UnsignedInt>)>();

  /// Turns on reshare policy control flag
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VEnableReshare(
    VPolicyPtr vPolicyPtr,
  ) {
    return _VEnableReshare(
      vPolicyPtr,
    );
  }

  late final _VEnableResharePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(VPolicyPtr)>>(
          'VEnableReshare');
  late final _VEnableReshare =
      _VEnableResharePtr.asFunction<int Function(VPolicyPtr)>();

  /// Turns off reshare policy control flag
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VDisableReshare(
    VPolicyPtr vPolicyPtr,
  ) {
    return _VDisableReshare(
      vPolicyPtr,
    );
  }

  late final _VDisableResharePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(VPolicyPtr)>>(
          'VDisableReshare');
  late final _VDisableReshare =
      _VDisableResharePtr.asFunction<int Function(VPolicyPtr)>();

  /// Return the status of 'Reshare' control flag.
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \param flag - True, if 'Reshare' control flag is set.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VIsReshareEnabled(
    VPolicyPtr vPolicyPtr,
    ffi.Pointer<ffi.Int> flag,
  ) {
    return _VIsReshareEnabled(
      vPolicyPtr,
      flag,
    );
  }

  late final _VIsReshareEnabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              VPolicyPtr, ffi.Pointer<ffi.Int>)>>('VIsReshareEnabled');
  late final _VIsReshareEnabled = _VIsReshareEnabledPtr.asFunction<
      int Function(VPolicyPtr, ffi.Pointer<ffi.Int>)>();

  /// Turns on watermarking policy control flag
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VEnableWatermarking(
    VPolicyPtr vPolicyPtr,
  ) {
    return _VEnableWatermarking(
      vPolicyPtr,
    );
  }

  late final _VEnableWatermarkingPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(VPolicyPtr)>>(
          'VEnableWatermarking');
  late final _VEnableWatermarking =
      _VEnableWatermarkingPtr.asFunction<int Function(VPolicyPtr)>();

  /// Turns off watermarking policy control flag
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VDisableWatermarking(
    VPolicyPtr vPolicyPtr,
  ) {
    return _VDisableWatermarking(
      vPolicyPtr,
    );
  }

  late final _VDisableWatermarkingPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(VPolicyPtr)>>(
          'VDisableWatermarking');
  late final _VDisableWatermarking =
      _VDisableWatermarkingPtr.asFunction<int Function(VPolicyPtr)>();

  /// Return the status of 'Watermarking' control flag.
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \param flag - True, if 'Watermarking' control flag is set.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VIsWatermarkingEnabled(
    VPolicyPtr vPolicyPtr,
    ffi.Pointer<ffi.Int> flag,
  ) {
    return _VIsWatermarkingEnabled(
      vPolicyPtr,
      flag,
    );
  }

  late final _VIsWatermarkingEnabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              VPolicyPtr, ffi.Pointer<ffi.Int>)>>('VIsWatermarkingEnabled');
  late final _VIsWatermarkingEnabled = _VIsWatermarkingEnabledPtr.asFunction<
      int Function(VPolicyPtr, ffi.Pointer<ffi.Int>)>();

  /// Turns on print policy control flag
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VEnablePrint(
    VPolicyPtr vPolicyPtr,
  ) {
    return _VEnablePrint(
      vPolicyPtr,
    );
  }

  late final _VEnablePrintPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(VPolicyPtr)>>(
          'VEnablePrint');
  late final _VEnablePrint =
      _VEnablePrintPtr.asFunction<int Function(VPolicyPtr)>();

  /// Turns off print policy control flag
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VDisablePrint(
    VPolicyPtr vPolicyPtr,
  ) {
    return _VDisablePrint(
      vPolicyPtr,
    );
  }

  late final _VDisablePrintPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(VPolicyPtr)>>(
          'VDisablePrint');
  late final _VDisablePrint =
      _VDisablePrintPtr.asFunction<int Function(VPolicyPtr)>();

  /// Return the status of 'Print' control flag.
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \param flag - True, if 'Print' control flag is set.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VIsPrintEnabled(
    VPolicyPtr vPolicyPtr,
    ffi.Pointer<ffi.Int> flag,
  ) {
    return _VIsPrintEnabled(
      vPolicyPtr,
      flag,
    );
  }

  late final _VIsPrintEnabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              VPolicyPtr, ffi.Pointer<ffi.Int>)>>('VIsPrintEnabled');
  late final _VIsPrintEnabled = _VIsPrintEnabledPtr.asFunction<
      int Function(VPolicyPtr, ffi.Pointer<ffi.Int>)>();

  /// Turns on copy policy control flag
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VEnableCopy(
    VPolicyPtr vPolicyPtr,
  ) {
    return _VEnableCopy(
      vPolicyPtr,
    );
  }

  late final _VEnableCopyPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(VPolicyPtr)>>(
          'VEnableCopy');
  late final _VEnableCopy =
      _VEnableCopyPtr.asFunction<int Function(VPolicyPtr)>();

  /// Turns off copy policy control flag
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VDisableCopy(
    VPolicyPtr vPolicyPtr,
  ) {
    return _VDisableCopy(
      vPolicyPtr,
    );
  }

  late final _VDisableCopyPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(VPolicyPtr)>>(
          'VDisableCopy');
  late final _VDisableCopy =
      _VDisableCopyPtr.asFunction<int Function(VPolicyPtr)>();

  /// Return the status of 'Copy' control flag.
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \param flag - True, if 'Copy' control flag is set.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VIsCopyEnabled(
    VPolicyPtr vPolicyPtr,
    ffi.Pointer<ffi.Int> flag,
  ) {
    return _VIsCopyEnabled(
      vPolicyPtr,
      flag,
    );
  }

  late final _VIsCopyEnabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              VPolicyPtr, ffi.Pointer<ffi.Int>)>>('VIsCopyEnabled');
  late final _VIsCopyEnabled = _VIsCopyEnabledPtr.asFunction<
      int Function(VPolicyPtr, ffi.Pointer<ffi.Int>)>();

  /// Turns on persistent protection policy control flag
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VEnablePersistentProtection(
    VPolicyPtr vPolicyPtr,
  ) {
    return _VEnablePersistentProtection(
      vPolicyPtr,
    );
  }

  late final _VEnablePersistentProtectionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(VPolicyPtr)>>(
          'VEnablePersistentProtection');
  late final _VEnablePersistentProtection =
      _VEnablePersistentProtectionPtr.asFunction<int Function(VPolicyPtr)>();

  /// Turns off persistent protection policy control flag
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VDisablePersistentProtection(
    VPolicyPtr vPolicyPtr,
  ) {
    return _VDisablePersistentProtection(
      vPolicyPtr,
    );
  }

  late final _VDisablePersistentProtectionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(VPolicyPtr)>>(
          'VDisablePersistentProtection');
  late final _VDisablePersistentProtection =
      _VDisablePersistentProtectionPtr.asFunction<int Function(VPolicyPtr)>();

  /// Return the status of 'PersistenProtection' control flag.
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \param flag - True, if 'PersistentProtection' control flag is set.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VIsPersistentProtection(
    VPolicyPtr vPolicyPtr,
    ffi.Pointer<ffi.Int> flag,
  ) {
    return _VIsPersistentProtection(
      vPolicyPtr,
      flag,
    );
  }

  late final _VIsPersistentProtectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              VPolicyPtr, ffi.Pointer<ffi.Int>)>>('VIsPersistentProtection');
  late final _VIsPersistentProtection = _VIsPersistentProtectionPtr.asFunction<
      int Function(VPolicyPtr, ffi.Pointer<ffi.Int>)>();

  /// Turns on prevent download policy control flag
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VEnablePreventDownload(
    VPolicyPtr vPolicyPtr,
  ) {
    return _VEnablePreventDownload(
      vPolicyPtr,
    );
  }

  late final _VEnablePreventDownloadPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(VPolicyPtr)>>(
          'VEnablePreventDownload');
  late final _VEnablePreventDownload =
      _VEnablePreventDownloadPtr.asFunction<int Function(VPolicyPtr)>();

  /// Turns off prevent download policy control flag
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VDisablePreventDownload(
    VPolicyPtr vPolicyPtr,
  ) {
    return _VDisablePreventDownload(
      vPolicyPtr,
    );
  }

  late final _VDisablePreventDownloadPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(VPolicyPtr)>>(
          'VDisablePreventDownload');
  late final _VDisablePreventDownload =
      _VDisablePreventDownloadPtr.asFunction<int Function(VPolicyPtr)>();

  /// Return the status of 'PreventDownload' control flag.
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \param flag - True, if 'PreventDownload' control flag is set.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VIsPreventDownloadEnabled(
    VPolicyPtr vPolicyPtr,
    ffi.Pointer<ffi.Int> flag,
  ) {
    return _VIsPreventDownloadEnabled(
      vPolicyPtr,
      flag,
    );
  }

  late final _VIsPreventDownloadEnabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              VPolicyPtr, ffi.Pointer<ffi.Int>)>>('VIsPreventDownloadEnabled');
  late final _VIsPreventDownloadEnabled = _VIsPreventDownloadEnabledPtr
      .asFunction<int Function(VPolicyPtr, ffi.Pointer<ffi.Int>)>();

  /// Set the expiration in minutes\n
  /// Access to the TDF data will be revoked for all users in the number of minutes specified, starting from the time this call is made.  The owner will retain access after the expiration time is reached.
  /// \param mins - minutes until expiration
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VExpireInMins(
    VPolicyPtr vPolicyPtr,
    int mins,
  ) {
    return _VExpireInMins(
      vPolicyPtr,
      mins,
    );
  }

  late final _VExpireInMinsPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(VPolicyPtr, ffi.UnsignedInt)>>(
      'VExpireInMins');
  late final _VExpireInMins =
      _VExpireInMinsPtr.asFunction<int Function(VPolicyPtr, int)>();

  /// Set the expiration in days\n
  /// Access to the TDF data will be revoked for all users in the number of days specified, starting from the time this call is made.  The owner will retain access after the expiration time is reached.
  /// \param days - days until expiration
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VExpireInDays(
    VPolicyPtr vPolicyPtr,
    int days,
  ) {
    return _VExpireInDays(
      vPolicyPtr,
      days,
    );
  }

  late final _VExpireInDaysPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(VPolicyPtr, ffi.UnsignedInt)>>(
      'VExpireInDays');
  late final _VExpireInDays =
      _VExpireInDaysPtr.asFunction<int Function(VPolicyPtr, int)>();

  /// Access to the TDF data will be revoked for all users at the specified date.  The owner will retain access after the expiration time is reached.
  /// The expiration date is specified in ISO-8601 format, and can include a time component.  Ex: 2019-05-24T16:12:41Z
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \param expirationDate - Expiration date when the TDF will expire, null terminated string.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VAddExpiration(
    VPolicyPtr vPolicyPtr,
    ffi.Pointer<ffi.Char> expirationDate,
  ) {
    return _VAddExpiration(
      vPolicyPtr,
      expirationDate,
    );
  }

  late final _VAddExpirationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              VPolicyPtr, ffi.Pointer<ffi.Char>)>>('VAddExpiration');
  late final _VAddExpiration = _VAddExpirationPtr.asFunction<
      int Function(VPolicyPtr, ffi.Pointer<ffi.Char>)>();

  /// Remove the expiration
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  int VRemoveExpiration(
    VPolicyPtr vPolicyPtr,
  ) {
    return _VRemoveExpiration(
      vPolicyPtr,
    );
  }

  late final _VRemoveExpirationPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(VPolicyPtr)>>(
          'VRemoveExpiration');
  late final _VRemoveExpiration =
      _VRemoveExpirationPtr.asFunction<int Function(VPolicyPtr)>();

  /// Return the expiration time(in ISO-8601 format) of the TDF.
  /// \param vPolicyPtr - The pointer to policy opaque object.
  /// \param expirationTimeStamp - The expiration time(in ISO-8601 format) of the TDF.
  /// \return VSTATUS - VSTATUS_SUCCESS on success
  /// NOTE: The caller is responsible for freeing the expirationTimeStamp.
  int VGetExpiration(
    VPolicyPtr vPolicyPtr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> expirationTimeStamp,
  ) {
    return _VGetExpiration(
      vPolicyPtr,
      expirationTimeStamp,
    );
  }

  late final _VGetExpirationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(VPolicyPtr,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('VGetExpiration');
  late final _VGetExpiration = _VGetExpirationPtr.asFunction<
      int Function(VPolicyPtr, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();
}

/// Status code
abstract class VSTATUS {
  static const int VSTATUS_SUCCESS = 0;

  /// Generic failure
  static const int VSTATUS_FAILURE = 1;

  /// Check the input parameters if they are valid.
  static const int VSTATUS_INVALID_PARAMS = 2;
}

/// TDF Protocol
abstract class VProtocol {
  static const int VProtocolZip = 0;
  static const int VProtocolHtml = 1;
}

/// Defines a log level.
abstract class VLogLevel {
  static const int VLogLevelTrace = 0;

  /// Most detailed output
  static const int VLogLevelDebug = 1;
  static const int VLogLevelInfo = 2;
  static const int VLogLevelWarn = 3;
  static const int VLogLevelError = 4;
  static const int VLogLevelFatal = 5;
}

/// Virtru client opaque object.
typedef VClientPtr = ffi.Pointer<ffi.Void>;

/// Encrypt file params opaque object.
typedef VEncryptFileParamsPtr = ffi.Pointer<ffi.Void>;

/// Encrypt string params opaque object.
typedef VEncryptStringParamsPtr = ffi.Pointer<ffi.Void>;
typedef VBytesPtr = ffi.Pointer<ffi.UnsignedChar>;
typedef VBytesLength = ffi.UnsignedInt;
typedef VCBytesPtr = ffi.Pointer<ffi.UnsignedChar>;

/// Policy opaque object.
typedef VPolicyPtr = ffi.Pointer<ffi.Void>;

final class ConfigService extends ffi.Opaque {}
