// The Android Gradle Plugin builds the native code with the Android NDK.

group 'com.virtru.sdk'
version '1.0'

buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        // The Android Gradle Plugin knows how to build native code with the NDK.
        classpath 'com.android.tools.build:gradle:7.3.1'
    }
}

rootProject.allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'

android {
    // Bumping the plugin compileSdkVersion requires all clients of this plugin
    // to bump the version in their app.
    compileSdkVersion 31

    // Bumping the plugin ndkVersion requires all clients of this plugin to bump
    // the version in their app and to download a newer version of the NDK.
    ndkVersion "25.2.9519653"


    // Invoke the shared CMake build with the Android Gradle Plugin.
//    externalNativeBuild {
//        cmake {
//            path "../src/virtru-tdf3-src/CMakeLists.txt"
//            buildStagingDirectory ".outputs"
//            version "3.22.1"
//
//            // The default CMake version for the Android Gradle Plugin is 3.10.2.
//            // https://developer.android.com/studio/projects/install-ndk#vanilla_cmake
//            //
//            // The Flutter tooling requires that developers have CMake 3.10 or later
//            // installed. You should not increase this version, as doing so will cause
//            // the plugin to fail to compile for some customers of the plugin.
//            // version "3.10.2"
//        }
//    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 21
//        ndk {
//            moduleName "virtru_tdf3"
//            abiFilters 'arm64-v8a', 'armeabi-v7a', "x86", "x86_64"
//            ldLibs "android", "log"
//        }
    }
}

//task conanInstallArm8(type: Exec) {
//    executable "conan" // on MacOSX may need to specify the absolute path, i.e. `/usr/local/bin/conan`
//    args = ["install", "conanfile.py",
//            "--profile=android_21_arm8_clang",
//            "--install-folder=${new File(".outputs").tap { mkdirs() }}",
//            "--build=missing"]
//    standardInput = System.in
//}
//
//task conanInstallArm7(type: Exec) {
//    executable "conan" // on MacOSX may need to specify the absolute path, i.e. `/usr/local/bin/conan`
//    args = ["install", "conanfile.py",
//            "--profile=android_21_arm7_clang",
//            "--install-folder=${new File(".outputs").tap { mkdirs() }}",
//            "--build=missing"]
//    standardInput = System.in
//}
//
//task conanInstallX86(type: Exec) {
//    executable "conan" // on MacOSX may need to specify the absolute path, i.e. `/usr/local/bin/conan`
//    args = ["install", "conanfile.py",
//            "--profile=android_21_x86_clang",
//            "--install-folder=${new File(".outputs").tap { mkdirs() }}",
//            "--build=missing"]
//    standardInput = System.in
//}
//
//task conanInstallX86_64(type: Exec) {
//    executable "conan" // on MacOSX may need to specify the absolute path, i.e. `/usr/local/bin/conan`
//    args = ["install", "conanfile.py",
//            "--profile=android_21_x86_64_clang",
//            "--install-folder=${new File(".outputs").tap { mkdirs() }}",
//            "--build=missing"]
//    standardInput = System.in
//}
//
//tasks.whenTaskAdded { task ->
//    if (task.name.contains('arm64-v8a')) {
//        task.dependsOn conanInstallArm8
//    } else if (task.name.contains('armeabi-v7a')) {
//        task.dependsOn conanInstallArm7
//    } else if (task.name.contains('x86_64')) {
//        task.dependsOn conanInstallX86_64
//    } else if (task.name.contains('x86')) {
//        task.dependsOn conanInstallX86
//    }
//}
